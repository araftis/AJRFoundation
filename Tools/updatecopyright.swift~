#!/usr/bin/swift

import Foundation

let processName = URL(fileURLWithPath: CommandLine.arguments[0]).deletingPathExtension().lastPathComponent
func Usage(error: String? = nil) -> Never {
    if let error {
        print("Error: \(error)")
    }
    print("Usage: \(CommandLine.arguments[0]) [options]")
    print("Options:")
    print("  --help                   This message.")
    print("  --license [license_file] The license to include in the top header.")
    print("  --base [base_path]       The base path to start the search for files to modify.")
    print("  --owner [owner]          The copyright owner.")
    print("  --skip [lines_to_skip]   The number of lines to skip on the license. The default is two.")
    print("  --extension [extension]  The file extension of files to include.")
    print("  --test                   Don't actually write changes.")
    exit(1)
}

var licensePath = "LICENSE.md"
var license = ""
var extensionsFirst = true
var extensions : Set<String> = ["c", "m", "h", "cpp", "hpp", "swift", "strings"]
var basePath = URL(fileURLWithPath: FileManager.default.currentDirectoryPath)
var package = basePath.lastPathComponent
var skip = 2
var copyrightOwner = ""
var copyright = ""
var testing = true

if true {
    let args = CommandLine.arguments
    var index = 1
    while index < args.count {
        switch args[index] {
        case "-l": fallthrough
        case "--license":
            if index < args.count - 1 && !args[index + 1].starts(with: "-") {
                index += 1
                licensePath = args[index]
            } else {
                Usage(error: "\(args[index]) must include a license path.")
            }
        case "-b": fallthrough
        case "--base":
            if index < args.count - 1 && !args[index + 1].starts(with: "-") {
                index += 1
                basePath = URL(fileURLWithPath: args[index]).standardizedFileURL
            } else {
                Usage(error: "\(args[index]) must include a base path.")
            }
        case "-o": fallthrough
        case "--owner":
            if index < args.count - 1 && !args[index + 1].starts(with: "-") {
                index += 1
                copyrightOwner = args[index]
            } else {
                Usage(error: "\(args[index]) must include an owner.")
            }
        case "-s": fallthrough
        case "--skip":
            if index < args.count - 1 && !args[index + 1].starts(with: "-") {
                index += 1
                if let value = Int(args[index]) {
                    skip = value
                } else {
                    Usage(error: "\(args[index]) isn't a valid integer.")
                }
            } else {
                Usage(error: "\(args[index]) must include a number of lines to skip.")
            }
        case "-e": fallthrough
        case "--extension":
            if index < args.count - 1 && !args[index + 1].starts(with: "-") {
                index += 1
                if extensionsFirst {
                    extensions.removeAll()
                    extensionsFirst = false
                }
                extensions.insert(args[index])
            } else {
                Usage(error: "\(args[index]) must include a base path.")
            }
        case "-t": fallthrough
        case "--test":
            testing = true
        case "-h": fallthrough
        case "--help":
            Usage()
        default:
            if args[index].starts(with: "-") {
                Usage(error: "Unknown argument: \(args[index])");
            }
        }
        index += 1
    }

    if !copyrightOwner.isEmpty {
        copyright = "Copyright Â© \(Calendar.current.component(.year, from: Date())), \(copyrightOwner)"
    }

    // Attempt to read the license.
    do {
        license = try String(contentsOf: URL(fileURLWithPath: licensePath))
    } catch {
        Usage(error: "Unable to read \(licensePath): \(error.localizedDescription)")
    }

    if let enumerator = FileManager.default.enumerator(at: basePath, includingPropertiesForKeys: [], options: [.skipsHiddenFiles]) {
        while let url = enumerator.nextObject() as? URL {
            if extensions.contains(url.pathExtension) {
                do {
                    try ProcessFile(url: url)
                } catch {
                    print("Error: \(url.path): \(error.localizedDescription)")
                }
            }
        }
    }
}

func WriteLicense(to outputFile: inout String) {
    outputFile += "/*\n"
    outputFile += " \(url.lastPathComponent)\n"
    outputFile += " \(package)\n"
    outputFile += "\n"
    if !copyrightOwner.isEmpty {
        outputFile += " \(copyright) \n"
        outputFile += " All rights reserved.\n"
        outputFile += "\n"
    }
    var lineNumber = 1
    license.enumerateLines { line, stop in
        if lineNumber > skip {
            if line.isEmpty {
                outputFile += "\n"
            } else {
                outputFile += " \(line)\n"
            }
        }
        lineNumber += 1
    }
    outputFile += " */\n"
}

func ProcessFile(url: URL) throws {
    try autoreleasepool {
        print("Processing: \(url.lastPathComponent)...", terminator: "")

        // First, read in the file contents.
        let inputFile = try String(contentsOf: url)

        var outputFile = ""

        enum HeaderStyle {
            case unknown
            case c
            case cpp
            case external
            case shellScript
        }

        var strippedPrevious = false
        var inHeader = false
        var style = HeaderStyle.unknown
        inputFile.enumerateLines { line, stop in
            let trimmed = line.trimmingCharacters(in: .whitespacesAndNewlines)
            if !strippedPrevious {
                if !inHeader {
                    // We haven't found how our header works yet.
                    if trimmed == "#!" {
                        outputFile += "\(trimmed)\n"
                    } else if trimmed == "/*-" {
                        // We use this to indicate when we don't own the copyright, so when we encounter this, we're done.
                        style = .external
                        stop = true
                    } else if trimmed == "/*" {
                        // OK, we're looking for /* and */ bracketed comments.
                        inHeader = true
                        style = .c
                    } else if trimmed.starts(with: "//") {
                        // OK, we're looking for C++ style comments
                        inHeader = true
                        style = .cpp
                    } else if trimmed.isEmpty {
                        // Just skip this line.
                    } else {
                        // We didn't find anything to strip, so just start copying.
                        inHeader = false
                        strippedPrevious = true
                        // Make sure to write this line out.
                        outputFile += "\(line)\n"
                    }
                } else {
                    // OK, we're in the header
                    if style == .c {
                        if trimmed == "*/" {
                            inHeader = false
                            strippedPrevious = true
                        }
                    } else if style == .cpp {
                        if !trimmed.hasPrefix("//") {
                            inHeader = false
                            strippedPrevious = true
                        }
                    }
                }
            } else {
                // Once we've stripped the previous, we can pretty much just copy the lines.
                // Althouhg I'm going to do a little clean up.
                outputFile += "\(line)\n"
            }
        }

        if style == .external {
            print("external copyright...", terminator: "")
        } else if outputFile != inputFile {
            if !testing {
                print("replacing...", terminator: "")
                //try outputFile.write(to: url, atomically: true, encoding: .utf8)
            } else {
                print("would replace...", terminator: "")
            }
        } else {
            print("skipping...", terminator: "")
        }

        print("done")

//        try? outputFile.write(to: URL(fileURLWithPath: "t1"), atomically: true, encoding: .utf8)
//        try? inputFile.write(to: URL(fileURLWithPath: "t2"), atomically: true, encoding: .utf8)
//        print(outputFile)

//        exit(1)
    }
}
